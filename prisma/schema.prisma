// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  image     String?
  imagePath String?
  password  String?
  authProvider String
  authToken String
  authExpiresAt DateTime
  churchId  String
  church    Church   @relation(fields: [churchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id        String   @id @default(cuid())
  name      String
  churches  Church[]
  currency  String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Church {
  id        String   @id @default(cuid())
  name      String
  zone      Zone     @relation(fields: [zoneId], references: [id])
  zoneId    String
  currency  String?
  country   String?
  uniqueCode String
  members   Member[]
  users     User[]
  entries   Entry[]
  isZone    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id        String   @id @default(cuid())
  memberId  String   @unique
  firstName String
  lastName  String?
  image     String?
  imagePath String?
  birthDate DateTime?
  email     String?
  phone     String?
  address   String?
  country   String?
  state    String?
  city     String?
  postalCode String?
  department String?
  church    Church   @relation(fields: [churchId], references: [id])
  churchId  String
  entries   Entry[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Entry {
  id        String   @id @default(cuid())
  date      DateTime
  category  String
  amount    Float
  paymentMethod String
  cashDenominations Json?
  chequeNumber String?
  reference String?
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id])
  church    Church   @relation(fields: [churchId], references: [id])
  churchId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
